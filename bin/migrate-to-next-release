#!/usr/bin/env bash

[ "${TRACE}" = "YES" ] && set -x && : "$0" "$@"

#
# optimally these are the only difference between mulle-clang and mulle-lldb
# migration
#
LLVM_PROJECT="lldb"                    # clang for clang
SOURCEDIRS="include/ source/"          # include/ lib/ for clang

# our old branches
OLD_LLVM_BRANCH="release_90"
OLD_MULLE_DEV_BRANCH="mulle_lldb_90"

# where we mirror whats happening in llvm
NEW_LLVM_BRANCH="release_100"
# our new branch
NEW_MULLE_DEV_BRANCH="mulle_lldb_100"

# usually don't edit these

# on the llvm server
NEW_ARCHIVE="https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/${LLVM_PROJECT}-10.0.0.src.tar.xz"

# check files used by this script
BEFOREFILE=.before-markers.txt
AFTERFILE=.after-markers.txt


#
# these functions should be identical in mulle-clang/mulle-lldb
# If you edit them edit the corresponding file too
#

####### >-> DONT EDIT >->
download_new_sources_and_merge()
{
   if ! git checkout -b "${NEW_LLVM_BRANCH}" "${OLD_LLVM_BRANCH}"
   then
      echo "Branch ${NEW_LLVM_BRANCH} must not exist and branch ${OLD_LLVM_BRANCH} must exist" >&2 && exit 1
   fi

   local name
   local dst

   dst="${PWD}"
   filename="`basename -- "${NEW_ARCHIVE}"`"
   name="${filename%.tar.xz}"

   # copy new source over old, also doing the proper deletions
   # but don't clobber .git accidentally
   if ! (
      cd /tmp  &&
      curl -L -O "${NEW_ARCHIVE}" &&
      tar xfJ "${filename}" &&
      cd "${name}" || exit 1

      local rval

      rsync -a --filter=':e .git' --delete-after . "${dst}/"
      rval=$?

      echo "rsync: $rval" >&2
      return $rval
   )
   then
      git reset --hard
      git checkout  "${OLD_LLVM_BRANCH}"
      git branch -d "${NEW_LLVM_BRANCH}"
      exit 1
   fi

   git add . &&
   git commit -m "${NEW_LLVM_BRANCH} added from \"${NEW_ARCHIVE}\""
}


migrate()
{
   echo "### 1: Sanity Checks" >&2 &&

   if ! git rev-parse --verify "${OLD_MULLE_DEV_BRANCH}" > /dev/null 2>&1
   then
      echo "Branch ${OLD_MULLE_DEV_BRANCH} must exist" >&2 && exit 1
   fi


   if ! git rev-parse --verify "${NEW_MULLE_DEV_BRANCH}" > /dev/null 2>&1
   then
      download_new_sources_and_merge || exit 1
   fi

   #
   # remove garbage tmp if present
   #
   if git rev-parse --verify "tmp_${NEW_MULLE_DEV_BRANCH}" > /dev/null 2>&1
   then
      git branch -D "tmp_${NEW_MULLE_DEV_BRANCH}" || exit 1
   fi

   #
   # remove garbage tag if present
   #
   if git rev-parse --verify "squashed_${OLD_MULLE_DEV_BRANCH}" > /dev/null 2>&1
   then
      git tag -d "squashed_${OLD_MULLE_DEV_BRANCH}" || exit 1
   fi

   echo "### 2: Fetch LLVM changes" >&2 &&


   ancestor="`git merge-base "${OLD_LLVM_BRANCH}" "${OLD_MULLE_DEV_BRANCH}"`"
   [ -z "${ancestor}" ] && echo "No common ancestor found" >&2 && exit 1


   # create a new temporary branch to contain squashed patchset
   echo "### 3: Checkout" >&2 &&

   git checkout -b "tmp_${NEW_MULLE_DEV_BRANCH}" "${ancestor}" || exit 1

   #
   # squash everything into new branch
   # this helps weed out re-edits and commits that weren't useful
   # easing the conflict resolution
   #
   # ???? git merge --squash "tmp_${OLD_MULLE_DEV_BRANCH}"
   echo "### 4: Squash Merge" >&2

   git merge --squash "${OLD_MULLE_DEV_BRANCH}" || exit 1

   echo "### 5: Add changed script files" >&2

   cp "${TMPDIR:-/tmp}/install-mulle-clang" "${TMPDIR:-/tmp}/migrate-to-next-release" "bin/" || exit 1
   chmod 755 "bin/install-mulle-clang" "bin/migrate-to-next-release"
   git add "bin/install-mulle-clang" "bin/migrate-to-next-release"

   #
   # There shouldn't be any problem until here. If there is a failure, before
   # this, you may run into a problem with scripts not being in /tmp
   #

   # commit stuff
   echo "### 6: Commit" >&2

   git commit -m "${OLD_MULLE_DEV_BRANCH} squashed + new version numbers" || exit 1

   #
   # remember until where did we squash the old branch (in case of
   # future edits)
   echo "### 7: Tag" >&2

   git tag "squashed_${OLD_MULLE_DEV_BRANCH}" "${OLD_MULLE_DEV_BRANCH}" || exit 1

   # count our change marker texts
   grep -R '@mulle-' ${SOURCEDIRS} > "${BEFOREFILE}" || exit 1

   #
   # Now get the new stuff
   #
   echo "### 8: Checkout" >&2

   git checkout -b "${NEW_MULLE_DEV_BRANCH}" "${NEW_LLVM_BRANCH}" || exit 1


   echo "### 9: Cherry pick" >&2

   if ! git cherry-pick "tmp_${NEW_MULLE_DEV_BRANCH}"
   then
      git status -s
      exit 1
   fi
}


cleanup()
{
   # count our change marker texts again
   grep -R '@mulle-' ${SOURCEDIRS} > "${AFTERFILE}" || exit 1

   local before
   local after

   before="`cat "${BEFOREFILE}" `"
   after="`cat "${AFTERFILE}" `"

   if [ "${before}" != "${after}" ]
   then
      echo "Some @mulle- tags got lost in the merge" >&2
      echo "before : ${BEFOREFILE}" >&2
      echo "after  : ${AFTERFILE}" >&2
      diff "${BEFOREFILE}" "${AFTERFILE}" >&2
      exit 1
   fi

   #
   # resolve conflicts manually.
   # Check with grep '@mulle-objc' ... | wc -l, that all changes are present
   #
   echo "### 10: Tmp branch delete" >&2

   git branch -D "tmp_${NEW_MULLE_DEV_BRANCH}" || exit 1
   rm "${AFTERFILE}" "${BEFOREFILE}"
}


####### <-< DONT EDIT <-<


#
#
# Since an old version of this script gets will get checked out over the new
# One we copy script to /tmp and exec there
#
if [ "${LLVM_PROJECT}" == "lldb" ]
then
   [ ! -e "MULLE_LLDB_VERSION" ] && echo "cd to the root of mulle-lldb" >&2 && exit 1
else
   [ ! -e "BUILD_MULLE_CLANG.md" ] && echo "cd to the root of mulle-clang" >&2 && exit 1
fi


setup()
{
   case "$0" in
      "${TMPDIR:-/tmp}"*)
      ;;

      *)
         echo "### 0: Executing script \"$0\" from tmp" >&2

         if  [ -e "bin/install-mulle-clang" ]
         then
            cp "bin/migrate-to-next-release" "${TMPDIR:-/tmp}" || exit 1
         fi
         cp "bin/migrate-to-next-release" "${TMPDIR:-/tmp}" || exit 1
         chmod 755 "${TMPDIR:-/tmp}/migrate-to-next-release" || exit 1
         exec "${TMPDIR:-/tmp}/migrate-to-next-release" "$@"
      ;;
   esac
}


case "$1" in
   'continue'|'cleanup')
      cleanup
   ;;

   grep)
      grep_markers
   ;;

   compare)
      compare
   ;;

   *)
      if [ ! -f "${AFTERFILE}" ]
      then
         setup
         migrate
      fi
      cleanup
   ;;
esac
