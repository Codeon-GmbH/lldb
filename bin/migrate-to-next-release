#!/usr/bin/env bash

set -x

[ "${TRACE}" = "YES" ] && set -x && : "$0" "$@"

OLD_LLVM_BRANCH="release_60"
OLD_MULLE_DEV_BRANCH="mulle_lldb_60"
NEW_LLVM_BRANCH="release_70"
NEW_MULLE_DEV_BRANCH="mulle_lldb_70"

LLVM_REMOTE="llvm"


migrate()
{
   [ ! -e "MULLE_LLDB_VERSION" ] && echo "cd to the root of mulle-lldb" >&2 && exit 1

   if ! git rev-parse --verify "${OLD_MULLE_DEV_BRANCH}" > /dev/null 2>&1
   then
      echo "Branch ${OLD_MULLE_DEV_BRANCH} must exist" >&2 && exit 1
   fi


   if git rev-parse --verify "${NEW_MULLE_DEV_BRANCH}" > /dev/null 2>&1
   then
      echo "Branch ${NEW_MULLE_DEV_BRANCH} must not exist yet" >&2 && exit 1
   fi

   #
   # remove garbage tmp if present
   #
   if git rev-parse --verify "tmp_${NEW_MULLE_DEV_BRANCH}" > /dev/null 2>&1
   then
      git branch -D "tmp_${NEW_MULLE_DEV_BRANCH}" || exit 1
   fi

   #
   # remove garbage tag if present
   #
   if git rev-parse --verify "squashed_${OLD_MULLE_DEV_BRANCH}" > /dev/null 2>&1
   then
      git tag -d "squashed_${OLD_MULLE_DEV_BRANCH}" || exit 1
   fi


   #
   # get new version from LLVM (github)
   #
   if ! git ls-remote --exit-code llvm > /dev/null
   then
      git remote add "${LLVM_REMOTE}" https://github.com/llvm-mirror/lldb.git 2> /dev/null
   fi
   git fetch "${LLVM_REMOTE}" || exit 1


   if ! git rev-parse --verify "${LLVM_REMOTE}/${OLD_LLVM_BRANCH}"  > /dev/null 2>&1
   then
      echo "Branch ${LLVM_REMOTE}/${OLD_LLVM_BRANCH} must exist" >&2 && exit 1
   fi


   # find the place we forked from last time
   ancestor="`git merge-base "${LLVM_REMOTE}/${OLD_LLVM_BRANCH}" "${OLD_MULLE_DEV_BRANCH}"`"
   [ -z "${ancestor}" ] && echo "No common ancestor found" >&2 && exit 1

   # create a new temporary branch to contain squashed patchset
   echo "### 1: Checkout" >&2 &&

   git checkout -b "tmp_${NEW_MULLE_DEV_BRANCH}" "${ancestor}" || exit 1

   #
   # squash everything into new branch
   # this helps weed out re-edits and commits that weren't useful
   # easing the conflict resolution
   #
   # ???? git merge --squash "tmp_${OLD_MULLE_DEV_BRANCH}"
   echo "### 2: Squash Merge" >&2

   git merge --squash "${OLD_MULLE_DEV_BRANCH}" || exit 1


   # commit stuff
   echo "### 3: Commit" >&2

   git commit -m "${OLD_MULLE_DEV_BRANCH} squashed" || exit 1

   # remember until where did we squash the old branch (in case of
   # future edits)
   echo "### 4: Tag" >&2

   git tag "squashed_${OLD_MULLE_DEV_BRANCH}" "${OLD_MULLE_DEV_BRANCH}" || exit 1

   # count our change marker texts
   BEFORELIST="`grep -R '@mulle-objc' include/ source/ `"

   #
   # Now get the new stuff
   #
   echo "### 5: Checkout" >&2

   git checkout -b "${NEW_MULLE_DEV_BRANCH}" "${LLVM_REMOTE}/${NEW_LLVM_BRANCH}" || exit 1

   echo "### 6: Cherry pick" >&2

   if ! git cherry-pick "tmp_${NEW_MULLE_DEV_BRANCH}"
   then
      git status -s
      exit 1
   fi
}

cleanup()
{
   # count our change marker texts again
   AFTERLIST="`grep -R '@mulle-objc' include/ source/`"

   if [ "${BEFORELIST}" != "${AFTERLIST}" ]
   then
      echo "Some @mulle-objc tags got lost in the merge" >&2
      diff  <(echo "$BEFORELIST" ) <(echo "$AFTERLIST") >&2
      exit 1
   fi


   #
   # resolve conflicts manually.
   # Check with grep '@mulle-objc' ... | wc -l, that all changes are present
   #
   echo "### 7: Tmp branch delete" >&2

   git branch -D "tmp_${NEW_MULLE_DEV_BRANCH}" || exit 1
}


#
# since an old version of this script gets checked out over the new one
# try to have bash parsed everything already
#

case "$1" in
   'continue'|'cleanup')
   ;;

   *)
      migrate
   ;;
esac

cleanup

